{"version":3,"sources":["drizzleOptions.js","MyComponent.js","App.js","serviceWorker.js","index.js"],"names":["options","web3","block","customProvider","Web3","givenProvider","contracts","SimpleStorage","syncAlways","events","AccountData","newContextComponents","ContractData","ContractForm","drizzle","drizzleState","className","accountIndex","units","precision","contract","method","class","href","target","Drizzle","drizzleOptions","App","Provider","Consumer","drizzleContext","initialized","MyComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6zaAeeA,EAZC,CACdC,KAAM,CACJC,OAAO,EACPC,eAAgB,IAAIC,IAAKA,IAAKC,gBAEhCC,UAAW,CAACC,GACZC,YAAY,EACZC,OAAQ,CACNF,cAAe,CAAC,gB,QCRZG,EAA4CC,uBAA5CD,YAAaE,EAA+BD,uBAA/BC,aAAcC,EAAiBF,uBAAjBE,aAEpB,cAAgC,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAEzB,OACE,yBAAKC,UAAU,OACb,6BACE,6CACA,kEAKF,yBAAKA,UAAU,WACb,uCACA,kBAACN,EAAD,CACEI,QAASA,EACTC,aAAcA,EACdE,aAAc,EACdC,MAAM,QACNC,UAAW,KAIf,yBAAKH,UAAU,WACb,8CACA,0CAGA,2BACE,2CACA,kBAACJ,EAAD,CACEE,QAASA,EACTC,aAAcA,EACdK,SAAS,gBACTC,OAAO,gBAGX,kBAACR,EAAD,CAAcC,QAASA,EAASM,SAAS,gBAAgBC,OAAO,SAGlE,yBAAKL,UAAU,WACb,oCACA,uBAAGM,MAAM,sBAAsBC,KAAK,gFAAgFC,OAAO,UAA3H,iCCvCFV,G,OAAU,IAAIW,UAAQC,IAsBbC,EApBH,WACV,OACE,kBAAC,iBAAeC,SAAhB,CAAyBd,QAASA,GAChC,kBAAC,iBAAee,SAAhB,MACG,SAAAC,GACC,IAAQhB,EAAuCgB,EAAvChB,QAASC,EAA8Be,EAA9Bf,aAEjB,OAF+Ce,EAAhBC,YAO7B,kBAACC,EAAD,CAAalB,QAASA,EAASC,aAAcA,IAJtC,gE,OCLCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f09c8308.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport SimpleStorage from \"./contracts/SimpleStorage.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    customProvider: new Web3(Web3.givenProvider),\n  },\n  contracts: [SimpleStorage],\n  syncAlways: false,\n  events: {\n    SimpleStorage: [\"StorageSet\"],\n  }\n};\n\nexport default options;\n","import React from \"react\";\nimport { newContextComponents } from \"@drizzle/react-components\";\n\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\n\nexport default ({ drizzle, drizzleState }) => {\n  // destructure drizzle and drizzleState from props\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Kovan Storage</h1>\n        <p>\n          Smart contracts via Kovan TestNet.\n        </p>\n      </div>\n\n      <div className=\"section\">\n        <h2>Account</h2>\n        <AccountData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          accountIndex={0}\n          units=\"ether\"\n          precision={3}\n        />\n      </div>\n\n      <div className=\"section\">\n        <h2>Number Storage</h2>\n        <p>\n          Last number\n        </p>\n        <p>\n          <strong>Value: </strong>\n          <ContractData\n            drizzle={drizzle}\n            drizzleState={drizzleState}\n            contract=\"SimpleStorage\"\n            method=\"storedData\"\n          />\n        </p>\n        <ContractForm drizzle={drizzle} contract=\"SimpleStorage\" method=\"set\" />\n      </div>\n\n      <div className=\"section\">\n        <h2>Data</h2>\n        <a class=\"badge badge-success\" href=\"https://kovan.etherscan.io/address/0xfbbb46e12c8c639680b2e5468f7a07cc66e2f481\" target=\"_blank\">https://kovan.etherscan.io</a>\n      </div>\n    </div>\n  );\n};","import React from \"react\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport drizzleOptions from \"./drizzleOptions\";\nimport MyComponent from \"./MyComponent\";\nimport \"./App.css\";\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nconst App = () => {\n  return (\n    <DrizzleContext.Provider drizzle={drizzle}>\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n\n          if (!initialized) {\n            return \"Processing... please connect Wallet + Kovan Test Network\"\n          }\n\n          return (\n            <MyComponent drizzle={drizzle} drizzleState={drizzleState} />\n          )\n        }}\n      </DrizzleContext.Consumer>\n    </DrizzleContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}